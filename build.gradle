import groovy.json.*

import org.jooq.codegen.GenerationTool
import org.jooq.meta.jaxb.Database
import org.jooq.meta.jaxb.Generator
import org.jooq.meta.jaxb.Jdbc
import org.jooq.meta.jaxb.Target

apply plugin: "java"

sourceCompatibility = 16

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

ext {
    def json = new JsonSlurper()
    def modFile = file("${sourceSets.main.resources.srcDirs.last()}/plugin.json")
    mod = json.parseText(modFile.text)
}

ext {
    mindustryVersion = "v140.2"
    lombokVersion = "1.18.24"
    discordWebhookVersion = "v1.6"
    jacksonYamlVersion = "2.13.0"
    jdaVersion = "5.0.0-alpha.18"
    mysqlVersion = "8.0.30"
    jooqVersion = "3.17.0"
}

repositories {
    mavenCentral()
    maven { url 'https://www.jitpack.io' }
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jooq:jooq:3.17.0" // older version due to older MySQL version on the host
        classpath "org.jooq:jooq-codegen:3.17.0"
        classpath "org.jooq:jooq-meta:3.17.0"
        classpath "mysql:mysql-connector-java:8.0.30"
    }
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    compileOnly "org.projectlombok:lombok:$lombokVersion"

    compileOnly ("com.github.Anuken.Mindustry:core:$mindustryVersion") { exclude module: "flabel" }
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"

    implementation "com.github.thedimasNetwork:DiscordWebhook:$discordWebhookVersion"
    implementation ("net.dv8tion:JDA:$jdaVersion") { exclude module: "opus-java" }
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonYamlVersion"

    implementation "org.jooq:jooq:$jooqVersion"
    implementation "mysql:mysql-connector-java:$mysqlVersion"

    runtimeOnly "mysql:mysql-connector-java:$mysqlVersion"
}

task codegen {
    doLast {
        var host, schema, user, password
        if (!project.hasProperty("dbhost") || !project.hasProperty("dbschema") || !project.hasProperty("dbuser") || !project.hasProperty("dbpassword")) {
            if (file("./database.json").exists()) {
                println("Using local JSON config")
                var json = new JsonSlurper()
                var dbFile = file("./database.json")
                var db = json.parseText(dbFile.text)

                host = db.host
                schema = db.schema
                user = db.username
                password = db.password
            } else {
                println("\u001B[33;1mWARNING!\u001B[0m No DB config. Compiling may fail due to lack of `gen` packet")
                return
            }
        } else {
            host = project.property("dbhost")
            schema = project.property("dbschema")
            user = project.property("dbuser")
            password = project.property("dbpassword")
        }
        println(sourceSets.main.java.srcDirs.first().path)
        org.jooq.meta.jaxb.Configuration configuration = new org.jooq.meta.jaxb.Configuration()
                .withJdbc(new Jdbc()
                        .withDriver("com.mysql.cj.jdbc.Driver")
                        .withUrl("jdbc:mysql://$host:3306/$schema")
                        .withUser("$user")
                        .withPassword("$password")
                )
                .withGenerator(new Generator()
                        .withDatabase(new Database()
                                .withName("org.jooq.meta.mysql.MySQLDatabase")
                                .withIncludes(".*")
                                .withExcludes("")
                                .withInputSchema("$schema")
                        )
                        .withTarget(new Target()
                                .withPackageName("stellar.database.gen")
                                .withDirectory(sourceSets.main.java.srcDirs.first().path)
                        )
                )

        GenerationTool.generate(configuration)
    }
}

jar {
    println("Make sure you're using latest database version. Do `./gradle codegen` to generate code")
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    archiveFileName = "${project.archivesBaseName}.jar"
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    from("assets/$mod.name/") {
        include "**"
    }

}

processResources {
    def build = (project.hasProperty("buildVersion") ? project.property("buildVersion") : "snapshot") + " | ${getGitHash()}"

    println("Compiling with build: '$build'")

    filesMatching("**/plugin.json") {
        from it.file
        filter { line -> line.replace("%buildVersion%", build) }
    }
}
