import groovy.json.*

apply plugin: "java"

sourceCompatibility = 16

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

ext {
    def json = new JsonSlurper()
    def modFile = file("${sourceSets.main.resources.srcDirs.last()}/plugin.json")
    mod = json.parseText(modFile.text)
}

ext {
    mindustryVersion = "v145"
    lombokVersion = "1.18.24"
    discordWebhookVersion = "v1.6"
    jacksonYamlVersion = "2.13.0"
    jdaVersion = "5.0.0-alpha.18"
    databaseVersion = "c55bf78a3e   "
}

repositories {
    mavenCentral()
    maven { url 'https://www.jitpack.io' }
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    compileOnly "org.projectlombok:lombok:$lombokVersion"

    compileOnly ("com.github.Anuken.Mindustry:core:$mindustryVersion") { exclude module: "flabel" }
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"

    implementation "com.github.thedimasNetwork:DiscordWebhook:$discordWebhookVersion"
    implementation ("net.dv8tion:JDA:$jdaVersion") { exclude module: "opus-java" }
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonYamlVersion"

    implementation "com.github.thedimasNetwork:DatabaseWrapper:$databaseVersion"
}

processResources {
    def build = (project.hasProperty("buildVersion") ? project.property("buildVersion") : "snapshot") + " | ${getGitHash()}"

    println("Compiling with build: '$build'")

    filesMatching("**/plugin.json") {
        from it.file
        filter { line -> line.replace("%buildVersion%", build) }
    }
}
