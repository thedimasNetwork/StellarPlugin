import groovy.json.*

apply plugin: "java"

sourceCompatibility = 16

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

ext {
    def json = new JsonSlurper()
    def modFile = file("${sourceSets.main.resources.srcDirs.last()}/plugin.json")
    mod = json.parseText(modFile.text)
}

ext {
    lombokVersion = "1.18.26"

    mindustryVersion = "v146"

    jacksonYamlVersion = "2.14.2"

    jdaVersion = "5.0.0-alpha.18"
    okhttpVersion = "4.10.0"

    postresqlVersion = "42.7.3"
    jooqVersion = "3.17.0"
    databaseVersion = "4147e9671c"

    bundlesVersion = "1.0.0"
}

repositories {
    mavenCentral()
    maven { url 'https://www.jitpack.io' }
    maven { url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    compileOnly "org.projectlombok:lombok:$lombokVersion"

    compileOnly ("com.github.Anuken.Arc:arc-core") {
        version {
            strictly(mindustryVersion)
        }
    }
    compileOnly ("com.github.Anuken.Mindustry:core:$mindustryVersion") {
        exclude module: "flabel"
        exclude module: "freetype"
        exclude module: "g3d"
        exclude module: "fx"
        exclude module: "arcnet"
    }

    implementation ("net.dv8tion:JDA:$jdaVersion") { exclude module: "opus-java" }
    compileOnly "com.squareup.okhttp3:okhttp:$okhttpVersion"

    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonYamlVersion"

    compileOnly "org.jooq:jooq:$jooqVersion"
    runtimeOnly "org.postgresql:postgresql:$postresqlVersion"
    implementation "com.github.thedimasNetwork:DatabaseWrapper:$databaseVersion"

    implementation "com.github.thedimas3007:Bundles:$bundlesVersion"
}

jar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    archiveFileName = "${project.archivesBaseName}.jar"
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    from("assets/$mod.name/") {
        include "**"
    }
}

processResources {
    def build = (project.hasProperty("buildVersion") ? project.property("buildVersion") : "snapshot") + " | ${getGitHash()}"

    println("Compiling with build: '$build'")

    filesMatching("**/plugin.json") {
        from it.file
        filter { line -> line.replace("%buildVersion%", build) }
    }
}
