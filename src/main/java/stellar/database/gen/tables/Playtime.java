/*
 * This file is generated by jOOQ.
 */
package stellar.database.gen.tables;


import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function15;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import stellar.database.gen.Keys;
import stellar.database.gen.Mindustry;
import stellar.database.gen.tables.records.PlaytimeRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Playtime extends TableImpl<PlaytimeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mindustry.playtime</code>
     */
    public static final Playtime PLAYTIME = new Playtime();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlaytimeRecord> getRecordType() {
        return PlaytimeRecord.class;
    }

    /**
     * The column <code>mindustry.playtime.uuid</code>.
     */
    public final TableField<PlaytimeRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>mindustry.playtime.hub</code>.
     */
    public final TableField<PlaytimeRecord, Long> HUB = createField(DSL.name("hub"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>mindustry.playtime.survival</code>.
     */
    public final TableField<PlaytimeRecord, Long> SURVIVAL = createField(DSL.name("survival"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>mindustry.playtime.attack</code>.
     */
    public final TableField<PlaytimeRecord, Long> ATTACK = createField(DSL.name("attack"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>mindustry.playtime.sandbox</code>.
     */
    public final TableField<PlaytimeRecord, Long> SANDBOX = createField(DSL.name("sandbox"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>mindustry.playtime.pvp</code>.
     */
    public final TableField<PlaytimeRecord, Long> PVP = createField(DSL.name("pvp"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>mindustry.playtime.erekir_hexed</code>.
     */
    public final TableField<PlaytimeRecord, Long> EREKIR_HEXED = createField(DSL.name("erekir_hexed"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>mindustry.playtime.anarchy</code>.
     */
    public final TableField<PlaytimeRecord, Long> ANARCHY = createField(DSL.name("anarchy"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>mindustry.playtime.campaign_maps</code>.
     */
    public final TableField<PlaytimeRecord, Long> CAMPAIGN_MAPS = createField(DSL.name("campaign_maps"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>mindustry.playtime.ms_go</code>.
     */
    public final TableField<PlaytimeRecord, Long> MS_GO = createField(DSL.name("ms_go"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>mindustry.playtime.hex_pvp</code>.
     */
    public final TableField<PlaytimeRecord, Long> HEX_PVP = createField(DSL.name("hex_pvp"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>mindustry.playtime.castle_wars</code>.
     */
    public final TableField<PlaytimeRecord, Long> CASTLE_WARS = createField(DSL.name("castle_wars"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>mindustry.playtime.crawler_arena</code>.
     */
    public final TableField<PlaytimeRecord, Long> CRAWLER_ARENA = createField(DSL.name("crawler_arena"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>mindustry.playtime.zone_capture</code>.
     */
    public final TableField<PlaytimeRecord, Long> ZONE_CAPTURE = createField(DSL.name("zone_capture"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>mindustry.playtime.test</code>.
     */
    public final TableField<PlaytimeRecord, Long> TEST = createField(DSL.name("test"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    private Playtime(Name alias, Table<PlaytimeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Playtime(Name alias, Table<PlaytimeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mindustry.playtime</code> table reference
     */
    public Playtime(String alias) {
        this(DSL.name(alias), PLAYTIME);
    }

    /**
     * Create an aliased <code>mindustry.playtime</code> table reference
     */
    public Playtime(Name alias) {
        this(alias, PLAYTIME);
    }

    /**
     * Create a <code>mindustry.playtime</code> table reference
     */
    public Playtime() {
        this(DSL.name("playtime"), null);
    }

    public <O extends Record> Playtime(Table<O> child, ForeignKey<O, PlaytimeRecord> key) {
        super(child, key, PLAYTIME);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mindustry.MINDUSTRY;
    }

    @Override
    public UniqueKey<PlaytimeRecord> getPrimaryKey() {
        return Keys.KEY_PLAYTIME_PRIMARY;
    }

    @Override
    public Playtime as(String alias) {
        return new Playtime(DSL.name(alias), this);
    }

    @Override
    public Playtime as(Name alias) {
        return new Playtime(alias, this);
    }

    @Override
    public Playtime as(Table<?> alias) {
        return new Playtime(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Playtime rename(String name) {
        return new Playtime(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Playtime rename(Name name) {
        return new Playtime(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Playtime rename(Table<?> name) {
        return new Playtime(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<String, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long> fieldsRow() {
        return (Row15) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function15<? super String, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Class, Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function15<? super String, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
