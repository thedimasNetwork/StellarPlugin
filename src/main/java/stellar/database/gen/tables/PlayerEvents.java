/*
 * This file is generated by jOOQ.
 */
package stellar.database.gen.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import stellar.database.gen.Indexes;
import stellar.database.gen.Keys;
import stellar.database.gen.Mindustry;
import stellar.database.gen.tables.records.PlayerEventsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlayerEvents extends TableImpl<PlayerEventsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mindustry.player_events</code>
     */
    public static final PlayerEvents PLAYER_EVENTS = new PlayerEvents();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlayerEventsRecord> getRecordType() {
        return PlayerEventsRecord.class;
    }

    /**
     * The column <code>mindustry.player_events.id</code>.
     */
    public final TableField<PlayerEventsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mindustry.player_events.server</code>.
     */
    public final TableField<PlayerEventsRecord, String> SERVER = createField(DSL.name("server"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>mindustry.player_events.timestamp</code>.
     */
    public final TableField<PlayerEventsRecord, Long> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>mindustry.player_events.type</code>.
     */
    public final TableField<PlayerEventsRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>mindustry.player_events.uuid</code>.
     */
    public final TableField<PlayerEventsRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>mindustry.player_events.ip</code>.
     */
    public final TableField<PlayerEventsRecord, String> IP = createField(DSL.name("ip"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>mindustry.player_events.name</code>.
     */
    public final TableField<PlayerEventsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>mindustry.player_events.message</code>.
     */
    public final TableField<PlayerEventsRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>mindustry.player_events.x</code>.
     */
    public final TableField<PlayerEventsRecord, Integer> X = createField(DSL.name("x"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>mindustry.player_events.y</code>.
     */
    public final TableField<PlayerEventsRecord, Integer> Y = createField(DSL.name("y"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>mindustry.player_events.block</code>.
     */
    public final TableField<PlayerEventsRecord, String> BLOCK = createField(DSL.name("block"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>mindustry.player_events.command</code>.
     */
    public final TableField<PlayerEventsRecord, String> COMMAND = createField(DSL.name("command"), SQLDataType.VARCHAR(255), this, "");

    private PlayerEvents(Name alias, Table<PlayerEventsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PlayerEvents(Name alias, Table<PlayerEventsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mindustry.player_events</code> table reference
     */
    public PlayerEvents(String alias) {
        this(DSL.name(alias), PLAYER_EVENTS);
    }

    /**
     * Create an aliased <code>mindustry.player_events</code> table reference
     */
    public PlayerEvents(Name alias) {
        this(alias, PLAYER_EVENTS);
    }

    /**
     * Create a <code>mindustry.player_events</code> table reference
     */
    public PlayerEvents() {
        this(DSL.name("player_events"), null);
    }

    public <O extends Record> PlayerEvents(Table<O> child, ForeignKey<O, PlayerEventsRecord> key) {
        super(child, key, PLAYER_EVENTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mindustry.MINDUSTRY;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PLAYER_EVENTS_UUID);
    }

    @Override
    public Identity<PlayerEventsRecord, Integer> getIdentity() {
        return (Identity<PlayerEventsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PlayerEventsRecord> getPrimaryKey() {
        return Keys.KEY_PLAYER_EVENTS_PRIMARY;
    }

    @Override
    public PlayerEvents as(String alias) {
        return new PlayerEvents(DSL.name(alias), this);
    }

    @Override
    public PlayerEvents as(Name alias) {
        return new PlayerEvents(alias, this);
    }

    @Override
    public PlayerEvents as(Table<?> alias) {
        return new PlayerEvents(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerEvents rename(String name) {
        return new PlayerEvents(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerEvents rename(Name name) {
        return new PlayerEvents(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerEvents rename(Table<?> name) {
        return new PlayerEvents(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, String, Long, String, String, String, String, String, Integer, Integer, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super Integer, ? super String, ? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Class, Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super Integer, ? super String, ? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
