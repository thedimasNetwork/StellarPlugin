/*
 * This file is generated by jOOQ.
 */
package stellar.database.gen.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import stellar.database.gen.Keys;
import stellar.database.gen.Mindustry;
import stellar.database.gen.tables.records.WarnsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Warns extends TableImpl<WarnsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mindustry.warns</code>
     */
    public static final Warns WARNS = new Warns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WarnsRecord> getRecordType() {
        return WarnsRecord.class;
    }

    /**
     * The column <code>mindustry.warns.id</code>.
     */
    public final TableField<WarnsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mindustry.warns.admin_uuid</code>.
     */
    public final TableField<WarnsRecord, String> ADMIN_UUID = createField(DSL.name("admin_uuid"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>mindustry.warns.target_uuid</code>.
     */
    public final TableField<WarnsRecord, String> TARGET_UUID = createField(DSL.name("target_uuid"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>mindustry.warns.reason</code>.
     */
    public final TableField<WarnsRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>mindustry.warns.create_time</code>.
     */
    public final TableField<WarnsRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>mindustry.warns.update_time</code>.
     */
    public final TableField<WarnsRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0), this, "");

    private Warns(Name alias, Table<WarnsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Warns(Name alias, Table<WarnsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mindustry.warns</code> table reference
     */
    public Warns(String alias) {
        this(DSL.name(alias), WARNS);
    }

    /**
     * Create an aliased <code>mindustry.warns</code> table reference
     */
    public Warns(Name alias) {
        this(alias, WARNS);
    }

    /**
     * Create a <code>mindustry.warns</code> table reference
     */
    public Warns() {
        this(DSL.name("warns"), null);
    }

    public <O extends Record> Warns(Table<O> child, ForeignKey<O, WarnsRecord> key) {
        super(child, key, WARNS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mindustry.MINDUSTRY;
    }

    @Override
    public Identity<WarnsRecord, Integer> getIdentity() {
        return (Identity<WarnsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<WarnsRecord> getPrimaryKey() {
        return Keys.KEY_WARNS_PRIMARY;
    }

    @Override
    public List<ForeignKey<WarnsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ADMIN_UUID_FKEY, Keys.TARGET_UUID_FKEY);
    }

    private transient Users _adminUuidFkey;
    private transient Users _targetUuidFkey;

    /**
     * Get the implicit join path to the <code>mindustry.users</code> table, via
     * the <code>admin_uuid_fkey</code> key.
     */
    public Users adminUuidFkey() {
        if (_adminUuidFkey == null)
            _adminUuidFkey = new Users(this, Keys.ADMIN_UUID_FKEY);

        return _adminUuidFkey;
    }

    /**
     * Get the implicit join path to the <code>mindustry.users</code> table, via
     * the <code>target_uuid_fkey</code> key.
     */
    public Users targetUuidFkey() {
        if (_targetUuidFkey == null)
            _targetUuidFkey = new Users(this, Keys.TARGET_UUID_FKEY);

        return _targetUuidFkey;
    }

    @Override
    public Warns as(String alias) {
        return new Warns(DSL.name(alias), this);
    }

    @Override
    public Warns as(Name alias) {
        return new Warns(alias, this);
    }

    @Override
    public Warns as(Table<?> alias) {
        return new Warns(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Warns rename(String name) {
        return new Warns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Warns rename(Name name) {
        return new Warns(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Warns rename(Table<?> name) {
        return new Warns(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Class, Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
