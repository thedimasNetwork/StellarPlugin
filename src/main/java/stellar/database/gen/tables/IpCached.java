/*
 * This file is generated by jOOQ.
 */
package stellar.database.gen.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import stellar.database.gen.Keys;
import stellar.database.gen.Mindustry;
import stellar.database.gen.tables.records.IpCachedRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IpCached extends TableImpl<IpCachedRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mindustry.ip_cached</code>
     */
    public static final IpCached IP_CACHED = new IpCached();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IpCachedRecord> getRecordType() {
        return IpCachedRecord.class;
    }

    /**
     * The column <code>mindustry.ip_cached.id</code>.
     */
    public final TableField<IpCachedRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mindustry.ip_cached.ip</code>.
     */
    public final TableField<IpCachedRecord, String> IP = createField(DSL.name("ip"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>mindustry.ip_cached.proxy</code>.
     */
    public final TableField<IpCachedRecord, Byte> PROXY = createField(DSL.name("proxy"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>mindustry.ip_cached.vpn</code>.
     */
    public final TableField<IpCachedRecord, Byte> VPN = createField(DSL.name("vpn"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>mindustry.ip_cached.type</code>.
     */
    public final TableField<IpCachedRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>mindustry.ip_cached.risk</code>.
     */
    public final TableField<IpCachedRecord, Short> RISK = createField(DSL.name("risk"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.SMALLINT)), this, "");

    private IpCached(Name alias, Table<IpCachedRecord> aliased) {
        this(alias, aliased, null);
    }

    private IpCached(Name alias, Table<IpCachedRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mindustry.ip_cached</code> table reference
     */
    public IpCached(String alias) {
        this(DSL.name(alias), IP_CACHED);
    }

    /**
     * Create an aliased <code>mindustry.ip_cached</code> table reference
     */
    public IpCached(Name alias) {
        this(alias, IP_CACHED);
    }

    /**
     * Create a <code>mindustry.ip_cached</code> table reference
     */
    public IpCached() {
        this(DSL.name("ip_cached"), null);
    }

    public <O extends Record> IpCached(Table<O> child, ForeignKey<O, IpCachedRecord> key) {
        super(child, key, IP_CACHED);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mindustry.MINDUSTRY;
    }

    @Override
    public Identity<IpCachedRecord, Integer> getIdentity() {
        return (Identity<IpCachedRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<IpCachedRecord> getPrimaryKey() {
        return Keys.KEY_IP_CACHED_PRIMARY;
    }

    @Override
    public List<UniqueKey<IpCachedRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_IP_CACHED_SECONDARY);
    }

    @Override
    public IpCached as(String alias) {
        return new IpCached(DSL.name(alias), this);
    }

    @Override
    public IpCached as(Name alias) {
        return new IpCached(alias, this);
    }

    @Override
    public IpCached as(Table<?> alias) {
        return new IpCached(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public IpCached rename(String name) {
        return new IpCached(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IpCached rename(Name name) {
        return new IpCached(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public IpCached rename(Table<?> name) {
        return new IpCached(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, Byte, Byte, String, Short> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super String, ? super Byte, ? super Byte, ? super String, ? super Short, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Class, Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super String, ? super Byte, ? super Byte, ? super String, ? super Short, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
